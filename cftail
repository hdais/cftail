#!/usr/bin/env python

import sys, time, re, getopt, StringIO

seq = {	'black' : [ '30', ],
	'red': ['31',],
	'green' : ['32',],
	'yellow': ['33', ],
	'blue': ['34', ],
	'magenta': ['35', ],
	'cyan': ['36', ],
	'white': ['37', ],
	'default': ('0', ), 'suppress': None }


# http://code.activestate.com/recipes/157035-tail-f-in-python/

def tail_lines(filename,linesback=10,returnlist=0):
    """Does what "tail -10 filename" would have done
       Parameters:
            filename   file to read
            linesback  Number of lines to read from end of file
            returnlist Return a list containing the lines instead of a string

    """
    avgcharsperline=75

    file = open(filename,'r')
    while 1:
        try: file.seek(-1 * avgcharsperline * linesback,2)
        except IOError: file.seek(0)
        if file.tell() == 0: atstart=1
        else: atstart=0

        lines=file.read().split("\n")
        if (len(lines) > (linesback+1)) or atstart: break
        #The lines are bigger than we thought
        avgcharsperline=avgcharsperline * 1.3 #Inc avg for retry
    file.close()

    if len(lines) > linesback: start=len(lines)-linesback -1
    else: start=0
    if returnlist: return lines[start:len(lines)-1]

    out=""
    for l in lines[start:len(lines)-1]: out=out + l + "\n"
    return out


def hilite(string, color, reverse=False):
	if color == 'default':
		return string
	s = seq[color]
	if reverse:
		s.append('7')
 	return '\x1b[%sm%s\x1b[0m' % (';'.join(s), string)

class filter:
	filterre = re.compile('^([a-zA-Z0-9]+)\s+([a-zA-Z0-9]+)\s+(\S+.*)$')
	#exceptionre = re.compile('^"(.*)"$')

	def __init__(self, filterfile=None, exceptionfile=None, reverse=False):
		self.filter = []
		self.exception = []
		self.reverse = reverse

	def filterappend(self, filterfile):
		for  l in filterfile.readlines():
			l = l.rstrip()
			l = l.lstrip()
			if len(l) == 0:
				continue
			if l[0] == '#':
				continue
			m = filter.filterre.match(l)
			try:
				action_match = m.group(1)
				action_exception = m.group(2)
				regexp = m.group(3)
			except:
				print >> sys.stderr, hilite('Filter rule syntax error:', 'red', self.reverse), l
				continue
			if action_match in seq.keys() and action_exception in seq.keys():
				try:
					r = re.compile(regexp)
				except:
					print >> sys.stderr, hilite('Filter regexp error:', 'red', self.reverse), l
					continue
			else:
				print >> sys.stderr, hilite('Filter invalid action:', 'red', self.reverse), l
				continue
			self.filter.append((action_match, action_exception, r))

	def exceptionappend(self, exceptionfile):
		for l in exceptionfile.readlines():
			l = l.lstrip()
			if len(l) == 0:
				continue
			if l[0] == '#':
				continue
			#m = filter.exceptionre.match(l)
			#if m:
			#	ex = m.group(1)
			#else:
			#	ex = l
			try:
				r = re.compile(l)
			except:
				print >> sys.stderr, hilite('Exception rule regexp error:', 'red', self.reverse), l
				continue
			self.exception.append(r)

	def setreverse(self, reverse):
		self.reverse = reverse

	def write(self, string):
		action = 'default'
		for rule in self.filter:
			action_match = rule[0]
			action_exception = rule[1]
			regexp = rule[2]
			if regexp.search(string):
				action = action_match
				break
		if action != 'default':
			for exception in self.exception:
				if exception.search(string):
					action = action_exception
		if action != 'suppress':
			sys.stdout.write(hilite(string, action, self.reverse))
			sys.stdout.flush()

def loop(filter, logfiles):
	while True:
		for f in logfiles:
			while True:
				line = f.readline()
				if line:
					filter.write(line)
				else:
					break
		time.sleep(0.2)
	
def usage():
	print >> sys.stderr, """usage: %s [-r] [-h] [-s] [-F <rule>] [-f <rule_file>]
       [-E <exception_rule>] [-e <exception_rule_file>]
       [ file ... ]""" % sys.argv[0]

def main():
	printlast10 = True
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'hrsf:F:e:E:')
	except getopt.GetoptError, err:
		print str(err)
		usage()
		sys.exit(2)
	myfilter = filter()
	for o, a in opts:
		if o == '-f':
			myfilter.filterappend(open(a))
		elif o == '-e':
			myfilter.exceptionappend(open(a))
		elif o == '-F':
			myfilter.filterappend(StringIO.StringIO(a))
		elif o == '-E':
			myfilter.exceptionappend(StringIO.StringIO(a))
		elif o == '-r':
			myfilter.setreverse(True)
		elif o == '-s':
			printlast10 = False
		elif o == '-h':
			usage()
			sys.exit(2)
	print >> sys.stderr, hilite('Filter %d rule(s), Exception %d rule(s) read', 'green') % (len(myfilter.filter), len(myfilter.exception))
	logfiles = []
	for name in args:
		if printlast10:
			out = tail_lines(name)
			for l in out:
				sys.stdout.write(l)
		f = open(name)
		f.seek(0,2)
		logfiles.append(f)
	if len(logfiles) < 1:
		logfiles.append(sys.stdin)
	loop(myfilter, logfiles)

if __name__ == '__main__':
	main()
